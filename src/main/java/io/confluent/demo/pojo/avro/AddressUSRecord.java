/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.confluent.demo.pojo.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class AddressUSRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8837344051529416741L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AddressUSRecord\",\"namespace\":\"io.confluent.demo.pojo.avro\",\"fields\":[{\"name\":\"streetaddress\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"city\",\"type\":{\"type\":\"record\",\"name\":\"cityinUS\",\"fields\":[{\"name\":\"city1\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"city2\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AddressUSRecord> ENCODER =
      new BinaryMessageEncoder<AddressUSRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AddressUSRecord> DECODER =
      new BinaryMessageDecoder<AddressUSRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AddressUSRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AddressUSRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AddressUSRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AddressUSRecord>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AddressUSRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AddressUSRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AddressUSRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AddressUSRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String streetaddress;
  @Deprecated public io.confluent.demo.pojo.avro.cityinUS city;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AddressUSRecord() {}

  /**
   * All-args constructor.
   * @param streetaddress The new value for streetaddress
   * @param city The new value for city
   */
  public AddressUSRecord(java.lang.String streetaddress, io.confluent.demo.pojo.avro.cityinUS city) {
    this.streetaddress = streetaddress;
    this.city = city;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return streetaddress;
    case 1: return city;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: streetaddress = (java.lang.String)value$; break;
    case 1: city = (io.confluent.demo.pojo.avro.cityinUS)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'streetaddress' field.
   * @return The value of the 'streetaddress' field.
   */
  public java.lang.String getStreetaddress() {
    return streetaddress;
  }


  /**
   * Sets the value of the 'streetaddress' field.
   * @param value the value to set.
   */
  public void setStreetaddress(java.lang.String value) {
    this.streetaddress = value;
  }

  /**
   * Gets the value of the 'city' field.
   * @return The value of the 'city' field.
   */
  public io.confluent.demo.pojo.avro.cityinUS getCity() {
    return city;
  }


  /**
   * Sets the value of the 'city' field.
   * @param value the value to set.
   */
  public void setCity(io.confluent.demo.pojo.avro.cityinUS value) {
    this.city = value;
  }

  /**
   * Creates a new AddressUSRecord RecordBuilder.
   * @return A new AddressUSRecord RecordBuilder
   */
  public static io.confluent.demo.pojo.avro.AddressUSRecord.Builder newBuilder() {
    return new io.confluent.demo.pojo.avro.AddressUSRecord.Builder();
  }

  /**
   * Creates a new AddressUSRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AddressUSRecord RecordBuilder
   */
  public static io.confluent.demo.pojo.avro.AddressUSRecord.Builder newBuilder(io.confluent.demo.pojo.avro.AddressUSRecord.Builder other) {
    if (other == null) {
      return new io.confluent.demo.pojo.avro.AddressUSRecord.Builder();
    } else {
      return new io.confluent.demo.pojo.avro.AddressUSRecord.Builder(other);
    }
  }

  /**
   * Creates a new AddressUSRecord RecordBuilder by copying an existing AddressUSRecord instance.
   * @param other The existing instance to copy.
   * @return A new AddressUSRecord RecordBuilder
   */
  public static io.confluent.demo.pojo.avro.AddressUSRecord.Builder newBuilder(io.confluent.demo.pojo.avro.AddressUSRecord other) {
    if (other == null) {
      return new io.confluent.demo.pojo.avro.AddressUSRecord.Builder();
    } else {
      return new io.confluent.demo.pojo.avro.AddressUSRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for AddressUSRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AddressUSRecord>
    implements org.apache.avro.data.RecordBuilder<AddressUSRecord> {

    private java.lang.String streetaddress;
    private io.confluent.demo.pojo.avro.cityinUS city;
    private io.confluent.demo.pojo.avro.cityinUS.Builder cityBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.confluent.demo.pojo.avro.AddressUSRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.streetaddress)) {
        this.streetaddress = data().deepCopy(fields()[0].schema(), other.streetaddress);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.city)) {
        this.city = data().deepCopy(fields()[1].schema(), other.city);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasCityBuilder()) {
        this.cityBuilder = io.confluent.demo.pojo.avro.cityinUS.newBuilder(other.getCityBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing AddressUSRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(io.confluent.demo.pojo.avro.AddressUSRecord other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.streetaddress)) {
        this.streetaddress = data().deepCopy(fields()[0].schema(), other.streetaddress);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.city)) {
        this.city = data().deepCopy(fields()[1].schema(), other.city);
        fieldSetFlags()[1] = true;
      }
      this.cityBuilder = null;
    }

    /**
      * Gets the value of the 'streetaddress' field.
      * @return The value.
      */
    public java.lang.String getStreetaddress() {
      return streetaddress;
    }


    /**
      * Sets the value of the 'streetaddress' field.
      * @param value The value of 'streetaddress'.
      * @return This builder.
      */
    public io.confluent.demo.pojo.avro.AddressUSRecord.Builder setStreetaddress(java.lang.String value) {
      validate(fields()[0], value);
      this.streetaddress = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'streetaddress' field has been set.
      * @return True if the 'streetaddress' field has been set, false otherwise.
      */
    public boolean hasStreetaddress() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'streetaddress' field.
      * @return This builder.
      */
    public io.confluent.demo.pojo.avro.AddressUSRecord.Builder clearStreetaddress() {
      streetaddress = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'city' field.
      * @return The value.
      */
    public io.confluent.demo.pojo.avro.cityinUS getCity() {
      return city;
    }


    /**
      * Sets the value of the 'city' field.
      * @param value The value of 'city'.
      * @return This builder.
      */
    public io.confluent.demo.pojo.avro.AddressUSRecord.Builder setCity(io.confluent.demo.pojo.avro.cityinUS value) {
      validate(fields()[1], value);
      this.cityBuilder = null;
      this.city = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'city' field has been set.
      * @return True if the 'city' field has been set, false otherwise.
      */
    public boolean hasCity() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'city' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public io.confluent.demo.pojo.avro.cityinUS.Builder getCityBuilder() {
      if (cityBuilder == null) {
        if (hasCity()) {
          setCityBuilder(io.confluent.demo.pojo.avro.cityinUS.newBuilder(city));
        } else {
          setCityBuilder(io.confluent.demo.pojo.avro.cityinUS.newBuilder());
        }
      }
      return cityBuilder;
    }

    /**
     * Sets the Builder instance for the 'city' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public io.confluent.demo.pojo.avro.AddressUSRecord.Builder setCityBuilder(io.confluent.demo.pojo.avro.cityinUS.Builder value) {
      clearCity();
      cityBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'city' field has an active Builder instance
     * @return True if the 'city' field has an active Builder instance
     */
    public boolean hasCityBuilder() {
      return cityBuilder != null;
    }

    /**
      * Clears the value of the 'city' field.
      * @return This builder.
      */
    public io.confluent.demo.pojo.avro.AddressUSRecord.Builder clearCity() {
      city = null;
      cityBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AddressUSRecord build() {
      try {
        AddressUSRecord record = new AddressUSRecord();
        record.streetaddress = fieldSetFlags()[0] ? this.streetaddress : (java.lang.String) defaultValue(fields()[0]);
        if (cityBuilder != null) {
          try {
            record.city = this.cityBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("city"));
            throw e;
          }
        } else {
          record.city = fieldSetFlags()[1] ? this.city : (io.confluent.demo.pojo.avro.cityinUS) defaultValue(fields()[1]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AddressUSRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<AddressUSRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AddressUSRecord>
    READER$ = (org.apache.avro.io.DatumReader<AddressUSRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.streetaddress);

    this.city.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.streetaddress = in.readString();

      if (this.city == null) {
        this.city = new io.confluent.demo.pojo.avro.cityinUS();
      }
      this.city.customDecode(in);

    } else {
      for (int i = 0; i < 2; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.streetaddress = in.readString();
          break;

        case 1:
          if (this.city == null) {
            this.city = new io.confluent.demo.pojo.avro.cityinUS();
          }
          this.city.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










